--顶层设计文件
LIBRARY IEEE;
USE IEEE.STD_LOGIC_1164.ALL;
USE IEEE.STD_LOGIC_UNSIGNED;
USE IEEE.STD_LOGIC_ARITH;

--总体电路的对外接口
ENTITY shootingGame IS
	PORT(
		clk:IN STD_LOGIC;--系统50MHz时钟
		sw7:IN STD_LOGIC;--拨码开关SW7
		btn0:IN STD_LOGIC;--按键BTN0，控制游戏开始
		btn1:IN STD_LOGIC;--按键BTN1，控制射击
		btn6:IN STD_LOGIC;--按键BTN6，控制靶的移动速度降低
		btn7:IN STD_LOGIC;--按键BTN7，控制靶的移动速度提高
		led0:OUT STD_LOGIC;--LED0，开关指示灯
		cat:OUT STD_LOGIC_VECTOR(0 TO 7);--数码管的选通信号
		digit:OUT STD_LOGIC_VECTOR(0 TO 7);--七段数码管AA~AG以及AP的电平信号
		row:OUT STD_LOGIC_VECTOR(0 TO 7);--点阵行选通信号
		colr:OUT STD_LOGIC_VECTOR(0 TO 7);--红色点阵列选通信号
		colg:OUT STD_LOGIC_VECTOR(0 TO 7);--绿色点阵列选通信号
		beep:OUT STD_LOGIC--蜂鸣器信号
	);
END ENTITY;

--各模块的接口以及接口之间的连线关系
ARCHITECTURE gameDesign OF shootingGame IS
	
	SIGNAL SIG_BTN_RESUME:STD_LOGIC;
	SIGNAL SIG_BTN_SHOOT:STD_LOGIC;
	SIGNAL SIG_BTN_SPEED_DOWN:STD_LOGIC;
	SIGNAL SIG_BTN_SPEED_UP:STD_LOGIC;
	SIGNAL SIG_CMP_CHK:STD_LOGIC;
	SIGNAL SIG_CMP_WT:STD_LOGIC;
	SIGNAL SIG_CMP_INIT:STD_LOGIC;
	SIGNAL SIG_CMP_GAME:STD_LOGIC;
	SIGNAL SIG_FLG_CHK:STD_LOGIC;
	SIGNAL SIG_FLG_WT:STD_LOGIC;
	SIGNAL SIG_FLG_INIT:STD_LOGIC;
	SIGNAL SIG_FLG_GAME:STD_LOGIC;
	SIGNAL SIG_FLG_RESULT:STD_LOGIC;
	SIGNAL SIG_FLG_PWR:STD_LOGIC;
	SIGNAL SIG_FLG_RESUME:STD_LOGIC;
	SIGNAL SIG_FLG_WIN:STD_LOGIC;
	SIGNAL SIG_FLG_BULLET:STD_LOGIC;
	SIGNAL SIG_STATE_CHK:INTEGER RANGE 0 TO 7;
	SIGNAL SIG_STATE_CHK_SCAN:INTEGER RANGE 0 TO 2;
	SIGNAL SIG_STATE_INIT:INTEGER RANGE 0 TO 7;
	SIGNAL SIG_STATE_GAME_TARGET:INTEGER RANGE 0 TO 9;
	SIGNAL SIG_STATE_GAME_BULLET:INTEGER RANGE 0 TO 6;
	SIGNAL SIG_STATE_GAME_TIME_LEFT:INTEGER RANGE 0 TO 40;
	SIGNAL SIG_STATE_GAME_SCORE:INTEGER RANGE 0 TO 19;
	SIGNAL SIG_RESULT_TIME_LEFT:INTEGER RANGE 0 TO 40;
	SIGNAL SIG_RESULT_SCORE:INTEGER RANGE 0 TO 19;
	SIGNAL SIG_FLG_BULLET_MISS:STD_LOGIC;
	SIGNAL SIG_FLG_BULLET_GET:STD_LOGIC;

	--控制器的接口设计		
	COMPONENT systemController
		PORT(
			CLK_SYS:IN STD_LOGIC;--系统50MHz时钟信号
			SW_PWR:IN STD_LOGIC;--拨码开关的状态
			BTN_RESUME:IN STD_LOGIC;--按键BTN0用于重新开始游戏时，该信号置1，否则置0
			CMP_CHK:IN STD_LOGIC;--自检过程完成标记信号，自检过程完成后，由自检模块反馈给控制器
			CMP_WT:IN STD_LOGIC;--待机过程完成标记信号，待机结束后，由待机模块反馈给控制器
			CMP_INIT:IN STD_LOGIC;--渐亮显示过程完成标记信号，渐亮显示结束后，由渐亮显示模块反馈给控制器
			CMP_GAME:IN STD_LOGIC;--游戏过程完成标记信号，游戏结束后，由游戏主界面模块反馈给控制器
			FLG_CHK:OUT STD_LOGIC;--自检模块正在执行的标记信号，此信号使能自检模块
			FLG_WT:OUT STD_LOGIC;--待机模块正在执行的标记信号，此信号使能待机模块
			FLG_INIT:OUT STD_LOGIC;--渐亮显示模块正在执行的标记信号，此信号使能渐亮显示模块
			FLG_GAME:OUT STD_LOGIC;--游戏主界面正在执行的标记信号，此信号使能游戏主界面模块
			FLG_RESULT:OUT STD_LOGIC;--结果显示过程正在执行的标记信号，此信号使能结果显示模块
			FLG_PWR:OUT STD_LOGIC;--拨码开关状态标记，由控制器通过此信号控制各子模块的重置
			FLG_RESUME:OUT STD_LOGIC--按键BTN0用于重新开始游戏时，控制器运用此标志信号控制渐亮显示、游戏主界面与结果显示模块的重置
		);
	END COMPONENT;

	--自检模块的接口设计
	COMPONENT autoCheck
		PORT(
			CLK_CHK:IN STD_LOGIC;--系统时钟信号
			EN_CHK:IN STD_LOGIC;--自检使能信号，由FLG_CHK驱动
			RST_CHK:IN STD_LOGIC;--自检模块重置信号，由FLG_PWR驱动
			CMP_CHK:OUT STD_LOGIC;--自检过程完成标记信号，用于反馈给控制器
			STATE_CHK:OUT INTEGER RANGE 0 TO 7;--当前扫描到第几行以及第几个数码管，用于控制显示模块以及音频播放模块
			STATE_CHK_SCAN:OUT INTEGER RANGE 0 TO 2--当前完成的扫描次数计数，用于判断自检是否完成
		);
	END COMPONENT;

	--待机模块的接口设计
	COMPONENT waitGame
		PORT(
			CLK_WT:IN STD_LOGIC;--系统时钟信号
			EN_WT:IN STD_LOGIC;--待机使能信号，由FLG_WT驱动
			RST_WT:IN STD_LOGIC;--待机模块重置信号，由FLG_PWR驱动
			BTN_START:IN STD_LOGIC;--接收BTN0按下的信号，判断待机过程是否完成
			CMP_WT:OUT STD_LOGIC--待机过程完成时，将此信号置1，反馈至控制器
		);
	END COMPONENT;

	--渐亮显示模块的接口设计
	COMPONENT initGun
		PORT(
			CLK_INIT:IN STD_LOGIC;--系统时钟信号
			EN_INIT:IN STD_LOGIC;--渐亮显示模块使能信号，由FLG_INIT驱动
			RST_INIT:IN STD_LOGIC;--渐亮显示模块重置信号，由FLG_PWR驱动
			RESUME_INIT:IN STD_LOGIC;--BTN0用于重新开始游戏时，重置渐亮显示模块
			CMP_INIT:OUT STD_LOGIC;--渐亮显示过程完成后，将此信号置1反馈至控制器
			STATE_INIT:OUT INTEGER RANGE 0 TO 7--在渐亮显示的不同阶段，此参数由0至7变化，由此控制点阵选通信号的占空比
		);
	END COMPONENT;

	--游戏主界面模块的接口设计
	COMPONENT mainGame
		PORT(
			CLK_GAME:IN STD_LOGIC;--系统时钟信号
			EN_GAME:IN STD_LOGIC;--游戏主界面模块使能信号，由FLG_GAME驱动
			RST_GAME:IN STD_LOGIC;--游戏主界面模块重置信号，由FLG_PWR驱动
			RESUME_GAME:IN STD_LOGIC;--BTN0用于重新开始游戏时，重置游戏主界面模块
			BTN_SHOOT:IN STD_LOGIC;--接收BTN1按下的射击信号
			BTN_SPEED_DOWN:IN STD_LOGIC;--接收BTN6按下的靶速减慢信号
			BTN_SPEED_UP:IN STD_LOGIC;--接收BTN7按下的靶速增加信号
			CMP_GAME:OUT STD_LOGIC;--游戏结束时，将此信号置1，反馈至控制器
			STATE_GAME_TARGET:OUT INTEGER RANGE 0 TO 9;--此参数用于记录移动靶的位置信息，显示模块根据此参数绘制点阵
			STATE_GAME_BULLET:OUT INTEGER RANGE 0 TO 6;--此参数用于记录子弹的位置信息，显示模块根据此参数绘制点阵
			STATE_GAME_TIME_LEFT:OUT INTEGER RANGE 0 TO 40;--此参数用于倒计时，显示模块根据此参数设置数码管
			STATE_GAME_SCORE:OUT INTEGER RANGE 0 TO 19;--此参数用于计分，显示模块根据此参数设置数码管
			STATE_GAME_SHOOT:OUT STD_LOGIC;--此参数用于表示子弹是否处于飞行状态，置1时，表示子弹正在飞行，此时显示模块绘制子弹轨迹，游戏模块不再响应BTN1的射击命令；置0时，表示没有子弹射出，此时显示模块不绘制子弹，游戏模块能够响应BTN1的射击命令
			FLG_BULLET_MISS:OUT STD_LOGIC;--子弹未命中的标记信号，用于控制音效播放模块
			FLG_BULLET_GET:OUT STD_LOGIC--子弹命中的标记信号，用于控制音效播放模块			
		);
	END COMPONENT;

	--结果显示模块的接口设计
	COMPONENT result
		PORT(
			CLK_RESULT:IN STD_LOGIC;--系统时钟
			EN_RESULT:IN STD_LOGIC;--结果显示模块的使能信号，由FLG_RESULT驱动
			STATE_GAME_TIME_LEFT:IN INTEGER RANGE 0 TO 40;--接收游戏主界面模块的倒计时信息，表示游戏结束时的剩余时间
			STATE_GAME_SCORE:IN INTEGER RANGE 0 TO 19;--接收游戏主界面模块的计分信息，表示游戏结束时的总分
			FLG_WIN:OUT STD_LOGIC;--表示游戏胜负，用于控制点阵的显示
			RESULT_TIME_LEFT:OUT INTEGER RANGE 0 TO 40;--输出游戏剩余时间，控制数码管显示
			RESULT_SCORE:OUT INTEGER RANGE 0 TO 19--输出游戏获得总分，控制数码管显示
		);
	END COMPONENT;

	--显示模块的接口设计
	COMPONENT displayer
		PORT(
			CLK_DISP:IN STD_LOGIC;--系统时钟
			FLG_PWR:IN STD_LOGIC;--拨码开关是否打开
			FLG_CHK:IN STD_LOGIC;--自检模块是否正在运行
			FLG_WT:IN STD_LOGIC;--待机模块是否正在运行
			FLG_INIT:IN STD_LOGIC;--渐亮显示模块是否正在运行
			FLG_GAME:IN STD_LOGIC;--游戏主界面模块是否正在运行
			FLG_RESULT:IN STD_LOGIC;--结果显示模块是否正在运行
			FLG_WIN:IN STD_LOGIC;--游戏结果的输赢情况
			--以上信息用于判断游戏处于哪个进程，从而控制显示模块进行相应的显示
			FLG_BULLET:IN STD_LOGIC;--表示子弹是否正在飞行，控制显示模块是否绘制子弹轨迹
			STATE_CHK:IN INTEGER RANGE 0 TO 7;--表示自检过程中正在扫描的点阵与数码管的定位信息，用于控制选通相应的点阵行与数码管
			STATE_INIT:IN INTEGER RANGE 0 TO 7;--表示渐亮显示过程中处于何种状态，用于控制点阵行选通信号的占空比
			STATE_GAME_TARGET:IN INTEGER RANGE 0 TO 9;--通过移动靶位置信息控制点阵绘制
			STATE_GAME_BULLET:IN INTEGER RANGE 0 TO 6;--通过子弹飞行位置信息控制点阵绘制
			STATE_GAME_TIME_LEFT:IN INTEGER RANGE 0 TO 40;--接收游戏剩余时间，控制数码管显示
			STATE_GAME_SCORE:IN INTEGER RANGE 0 TO 19;--接收得分信息，控制数码管显示
			RESULT_TIME_LEFT:IN INTEGER RANGE 0 TO 40;--接收游戏结束后的游戏剩余时间，控制数码管是否闪烁显示
			RESULT_SCORE:IN INTEGER RANGE 0 TO 19;--接收游戏结束后的总得分信息，控制数码管是否闪烁显示
			LED0_OUT:OUT STD_LOGIC;--根据FLG_PWR设置此信号，决定开关指示灯是否点亮
			CAT_OUT:OUT STD_LOGIC_VECTOR(0 TO 7);--控制数码管选通
			DIGIT_OUT:OUT STD_LOGIC_VECTOR(0 TO 7);--控制数码管显示
			ROW_OUT:OUT STD_LOGIC_VECTOR(0 TO 7);--控制点阵行选通
			COLR_OUT:OUT STD_LOGIC_VECTOR(0 TO 7);--控制红色点阵列选通
			COLG_OUT:OUT STD_LOGIC_VECTOR(0 TO 7)--控制绿色点阵列选通
		);
	END COMPONENT;

	按键消抖模块的接口设计
	COMPONENT buttonProcessor
		PORT(
			CLK_BTNP:IN STD_LOGIC;--系统时钟
			BTN0_IN:IN STD_LOGIC;--接收BTN0的按键信号
			BTN1_IN:IN STD_LOGIC;--接收BTN1的按键信号
			BTN6_IN:IN STD_LOGIC;--接收BTN6的按键信号
			BTN7_IN:IN STD_LOGIC;--接收BTN7的按键信号
			BTN_RESUME:OUT STD_LOGIC;--发出消抖后的BTN0的开始游戏或者重新开始游戏的信号
			BTN_SHOOT:OUT STD_LOGIC;--发出消抖后的BTN1的射击信号
			BTN_SPEED_DOWN:OUT STD_LOGIC;--发出消抖后的BTN6的靶减速信号
			BTN_SPEED_UP:OUT STD_LOGIC--发出消抖后的BTN7的靶加速信号
		);
	END COMPONENT;

	--音效播放模块的接口设计
	COMPONENT musicPlayer
		PORT(
			CLK_BEEP:IN STD_LOGIC;--系统时钟
			FLG_PWR:IN STD_LOGIC;--拨码开关是否打开
			FLG_RESUME:IN STD_LOGIC;--是否重新开始游戏
			FLG_CHK:IN STD_LOGIC;--游戏是否处于自检状态
			STATE_CHK:IN INTEGER RANGE 0 TO 7;--自检阶段，根据此信号控制蜂鸣器的音阶播放
			STATE_CHK_SCAN:IN INTEGER RANGE 0 TO 2;--自检阶段，根据此信号控制蜂鸣器的音高信息
			FLG_GAME:IN STD_LOGIC;--是否处于游戏主界面的运行状态，控制播放游戏背景音乐
			FLG_BULLET_MISS:IN STD_LOGIC;--控制播放“未命中”音效
			FLG_BULLET_GET:IN STD_LOGIC;--控制播放“命中”音效
			FLG_RESULT:IN STD_LOGIC;--是否处于结果显示界面
			FLG_WIN:IN STD_LOGIC;--判断游戏结果的输赢，控制播放相应音效
			TONE_OUT:OUT STD_LOGIC--实际输出声音信号
		);
	END COMPONENT;
	
BEGIN

	--各模块接口间的连线方式
	u1:systemController PORT MAP(
		CLK_SYS=>clk,
		SW_PWR=>sw7,
		BTN_RESUME=>SIG_BTN_RESUME,
		CMP_CHK=>SIG_CMP_CHK,
		CMP_WT=>SIG_CMP_WT,
		CMP_INIT=>SIG_CMP_INIT,
		CMP_GAME=>SIG_CMP_GAME,
		FLG_CHK=>SIG_FLG_CHK,
		FLG_WT=>SIG_FLG_WT,
		FLG_INIT=>SIG_FLG_INIT,
		FLG_GAME=>SIG_FLG_GAME,
		FLG_RESULT=>SIG_FLG_RESULT,
		FLG_PWR=>SIG_FLG_PWR,
		FLG_RESUME=>SIG_FLG_RESUME
	);

	u2:autoCheck PORT MAP(
		CLK_CHK=>clk,
		EN_CHK=>SIG_FLG_CHK,
		RST_CHK=>SIG_FLG_PWR,
		CMP_CHK=>SIG_CMP_CHK,
		STATE_CHK=>SIG_STATE_CHK,
		STATE_CHK_SCAN=>SIG_STATE_CHK_SCAN
	);
	
	u3:waitGame PORT MAP(
		CLK_WT=>clk,
		EN_WT=>SIG_FLG_WT,
		RST_WT=>SIG_FLG_PWR,
		BTN_START=>SIG_BTN_RESUME,
		CMP_WT=>SIG_CMP_WT
	);
	
	u4:initGun PORT MAP(
		CLK_INIT=>clk,
		EN_INIT=>SIG_FLG_INIT,
		RST_INIT=>SIG_FLG_PWR,
		RESUME_INIT=>SIG_FLG_RESUME,
		CMP_INIT=>SIG_CMP_INIT,
		STATE_INIT=>SIG_STATE_INIT
	);
	
	u5:mainGame PORT MAP(
		CLK_GAME=>clk,
		EN_GAME=>SIG_FLG_GAME,
		RST_GAME=>SIG_FLG_PWR,
		RESUME_GAME=>SIG_FLG_RESUME,
		BTN_SHOOT=>SIG_BTN_SHOOT,
		BTN_SPEED_DOWN=>SIG_BTN_SPEED_DOWN,
		BTN_SPEED_UP=>SIG_BTN_SPEED_UP,
		CMP_GAME=>SIG_CMP_GAME,
		STATE_GAME_TARGET=>SIG_STATE_GAME_TARGET,
		STATE_GAME_BULLET=>SIG_STATE_GAME_BULLET,
		STATE_GAME_TIME_LEFT=>SIG_STATE_GAME_TIME_LEFT,
		STATE_GAME_SCORE=>SIG_STATE_GAME_SCORE,
		STATE_GAME_SHOOT=>SIG_FLG_BULLET,
		FLG_BULLET_MISS=>SIG_FLG_BULLET_MISS,
		FLG_BULLET_GET=>SIG_FLG_BULLET_GET
	);
	
	u6:result PORT MAP(
		CLK_RESULT=>clk,
		EN_RESULT=>SIG_FLG_RESULT,
		STATE_GAME_TIME_LEFT=>SIG_STATE_GAME_TIME_LEFT,
		STATE_GAME_SCORE=>SIG_STATE_GAME_SCORE,
		FLG_WIN=>SIG_FLG_WIN,
		RESULT_TIME_LEFT=>SIG_RESULT_TIME_LEFT,
		RESULT_SCORE=>SIG_RESULT_SCORE
	);
	
	u7:displayer PORT MAP(
		CLK_DISP=>clk,
		FLG_PWR=>SIG_FLG_PWR,
		FLG_CHK=>SIG_FLG_CHK,
		FLG_WT=>SIG_FLG_WT,
		FLG_INIT=>SIG_FLG_INIT,
		FLG_GAME=>SIG_FLG_GAME,
		FLG_RESULT=>SIG_FLG_RESULT,
		FLG_WIN=>SIG_FLG_WIN,
		FLG_BULLET=>SIG_FLG_BULLET,
		STATE_CHK=>SIG_STATE_CHK,
		STATE_INIT=>SIG_STATE_INIT,
		STATE_GAME_TARGET=>SIG_STATE_GAME_TARGET,
		STATE_GAME_BULLET=>SIG_STATE_GAME_BULLET,
		STATE_GAME_TIME_LEFT=>SIG_STATE_GAME_TIME_LEFT,
		STATE_GAME_SCORE=>SIG_STATE_GAME_SCORE,
		RESULT_TIME_LEFT=>SIG_RESULT_TIME_LEFT,
		RESULT_SCORE=>SIG_RESULT_SCORE,
		LED0_OUT=>led0,
		CAT_OUT=>cat,
		DIGIT_OUT=>digit,
		ROW_OUT=>row,
		COLR_OUT=>colr,
		COLG_OUT=>colg
	);
	
	u8:buttonProcessor PORT MAP(
		CLK_BTNP=>clk,
		BTN0_IN=>btn0,
		BTN1_IN=>btn1,
		BTN6_IN=>btn6,
		BTN7_IN=>btn7,
		BTN_RESUME=>SIG_BTN_RESUME,
		BTN_SHOOT=>SIG_BTN_SHOOT,
		BTN_SPEED_DOWN=>SIG_BTN_SPEED_DOWN,
		BTN_SPEED_UP=>SIG_BTN_SPEED_UP
	);
	
	u9:musicPlayer PORT MAP(
		CLK_BEEP=>clk,
		FLG_PWR=>SIG_FLG_PWR,
		FLG_RESUME=>SIG_FLG_RESUME,
		FLG_CHK=>SIG_FLG_CHK,
		STATE_CHK=>SIG_STATE_CHK,
		STATE_CHK_SCAN=>SIG_STATE_CHK_SCAN,
		FLG_GAME=>SIG_FLG_GAME,
		FLG_BULLET_MISS=>SIG_FLG_BULLET_MISS,
		FLG_BULLET_GET=>SIG_FLG_BULLET_GET,
		FLG_RESULT=>SIG_FLG_RESULT,
		FLG_WIN=>SIG_FLG_WIN,
		TONE_OUT=>beep
	);
	
END gameDesign;
